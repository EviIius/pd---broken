"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(() => {
var exports = {};
exports.id = "pages/api/ask";
exports.ids = ["pages/api/ask"];
exports.modules = {

/***/ "next/dist/compiled/next-server/pages-api.runtime.dev.js":
/*!**************************************************************************!*\
  !*** external "next/dist/compiled/next-server/pages-api.runtime.dev.js" ***!
  \**************************************************************************/
/***/ ((module) => {

module.exports = require("next/dist/compiled/next-server/pages-api.runtime.dev.js");

/***/ }),

/***/ "@google/generative-ai":
/*!****************************************!*\
  !*** external "@google/generative-ai" ***!
  \****************************************/
/***/ ((module) => {

module.exports = import("@google/generative-ai");;

/***/ }),

/***/ "(api)/./node_modules/next/dist/build/webpack/loaders/next-route-loader/index.js?kind=PAGES_API&page=%2Fapi%2Fask&preferredRegion=&absolutePagePath=.%2Fpages%5Capi%5Cask.ts&middlewareConfigBase64=e30%3D!":
/*!************************************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/next/dist/build/webpack/loaders/next-route-loader/index.js?kind=PAGES_API&page=%2Fapi%2Fask&preferredRegion=&absolutePagePath=.%2Fpages%5Capi%5Cask.ts&middlewareConfigBase64=e30%3D! ***!
  \************************************************************************************************************************************************************************************************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.a(module, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   config: () => (/* binding */ config),\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__),\n/* harmony export */   routeModule: () => (/* binding */ routeModule)\n/* harmony export */ });\n/* harmony import */ var next_dist_server_future_route_modules_pages_api_module_compiled__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! next/dist/server/future/route-modules/pages-api/module.compiled */ \"(api)/./node_modules/next/dist/server/future/route-modules/pages-api/module.compiled.js\");\n/* harmony import */ var next_dist_server_future_route_modules_pages_api_module_compiled__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_future_route_modules_pages_api_module_compiled__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var next_dist_server_future_route_kind__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! next/dist/server/future/route-kind */ \"(api)/./node_modules/next/dist/server/future/route-kind.js\");\n/* harmony import */ var next_dist_build_templates_helpers__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! next/dist/build/templates/helpers */ \"(api)/./node_modules/next/dist/build/templates/helpers.js\");\n/* harmony import */ var _pages_api_ask_ts__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./pages\\api\\ask.ts */ \"(api)/./pages/api/ask.ts\");\nvar __webpack_async_dependencies__ = __webpack_handle_async_dependencies__([_pages_api_ask_ts__WEBPACK_IMPORTED_MODULE_3__]);\n_pages_api_ask_ts__WEBPACK_IMPORTED_MODULE_3__ = (__webpack_async_dependencies__.then ? (await __webpack_async_dependencies__)() : __webpack_async_dependencies__)[0];\n\n\n\n// Import the userland code.\n\n// Re-export the handler (should be the default export).\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ((0,next_dist_build_templates_helpers__WEBPACK_IMPORTED_MODULE_2__.hoist)(_pages_api_ask_ts__WEBPACK_IMPORTED_MODULE_3__, \"default\"));\n// Re-export config.\nconst config = (0,next_dist_build_templates_helpers__WEBPACK_IMPORTED_MODULE_2__.hoist)(_pages_api_ask_ts__WEBPACK_IMPORTED_MODULE_3__, \"config\");\n// Create and export the route module that will be consumed.\nconst routeModule = new next_dist_server_future_route_modules_pages_api_module_compiled__WEBPACK_IMPORTED_MODULE_0__.PagesAPIRouteModule({\n    definition: {\n        kind: next_dist_server_future_route_kind__WEBPACK_IMPORTED_MODULE_1__.RouteKind.PAGES_API,\n        page: \"/api/ask\",\n        pathname: \"/api/ask\",\n        // The following aren't used in production.\n        bundlePath: \"\",\n        filename: \"\"\n    },\n    userland: _pages_api_ask_ts__WEBPACK_IMPORTED_MODULE_3__\n});\n\n//# sourceMappingURL=pages-api.js.map\n__webpack_async_result__();\n} catch(e) { __webpack_async_result__(e); } });//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwaSkvLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L2J1aWxkL3dlYnBhY2svbG9hZGVycy9uZXh0LXJvdXRlLWxvYWRlci9pbmRleC5qcz9raW5kPVBBR0VTX0FQSSZwYWdlPSUyRmFwaSUyRmFzayZwcmVmZXJyZWRSZWdpb249JmFic29sdXRlUGFnZVBhdGg9LiUyRnBhZ2VzJTVDYXBpJTVDYXNrLnRzJm1pZGRsZXdhcmVDb25maWdCYXNlNjQ9ZTMwJTNEISIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7OztBQUFzRztBQUN2QztBQUNMO0FBQzFEO0FBQ2lEO0FBQ2pEO0FBQ0EsaUVBQWUsd0VBQUssQ0FBQyw4Q0FBUSxZQUFZLEVBQUM7QUFDMUM7QUFDTyxlQUFlLHdFQUFLLENBQUMsOENBQVE7QUFDcEM7QUFDTyx3QkFBd0IsZ0hBQW1CO0FBQ2xEO0FBQ0EsY0FBYyx5RUFBUztBQUN2QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMLFlBQVk7QUFDWixDQUFDOztBQUVELHFDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZnJvbnRlbmQvPzVmMTMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgUGFnZXNBUElSb3V0ZU1vZHVsZSB9IGZyb20gXCJuZXh0L2Rpc3Qvc2VydmVyL2Z1dHVyZS9yb3V0ZS1tb2R1bGVzL3BhZ2VzLWFwaS9tb2R1bGUuY29tcGlsZWRcIjtcbmltcG9ydCB7IFJvdXRlS2luZCB9IGZyb20gXCJuZXh0L2Rpc3Qvc2VydmVyL2Z1dHVyZS9yb3V0ZS1raW5kXCI7XG5pbXBvcnQgeyBob2lzdCB9IGZyb20gXCJuZXh0L2Rpc3QvYnVpbGQvdGVtcGxhdGVzL2hlbHBlcnNcIjtcbi8vIEltcG9ydCB0aGUgdXNlcmxhbmQgY29kZS5cbmltcG9ydCAqIGFzIHVzZXJsYW5kIGZyb20gXCIuL3BhZ2VzXFxcXGFwaVxcXFxhc2sudHNcIjtcbi8vIFJlLWV4cG9ydCB0aGUgaGFuZGxlciAoc2hvdWxkIGJlIHRoZSBkZWZhdWx0IGV4cG9ydCkuXG5leHBvcnQgZGVmYXVsdCBob2lzdCh1c2VybGFuZCwgXCJkZWZhdWx0XCIpO1xuLy8gUmUtZXhwb3J0IGNvbmZpZy5cbmV4cG9ydCBjb25zdCBjb25maWcgPSBob2lzdCh1c2VybGFuZCwgXCJjb25maWdcIik7XG4vLyBDcmVhdGUgYW5kIGV4cG9ydCB0aGUgcm91dGUgbW9kdWxlIHRoYXQgd2lsbCBiZSBjb25zdW1lZC5cbmV4cG9ydCBjb25zdCByb3V0ZU1vZHVsZSA9IG5ldyBQYWdlc0FQSVJvdXRlTW9kdWxlKHtcbiAgICBkZWZpbml0aW9uOiB7XG4gICAgICAgIGtpbmQ6IFJvdXRlS2luZC5QQUdFU19BUEksXG4gICAgICAgIHBhZ2U6IFwiL2FwaS9hc2tcIixcbiAgICAgICAgcGF0aG5hbWU6IFwiL2FwaS9hc2tcIixcbiAgICAgICAgLy8gVGhlIGZvbGxvd2luZyBhcmVuJ3QgdXNlZCBpbiBwcm9kdWN0aW9uLlxuICAgICAgICBidW5kbGVQYXRoOiBcIlwiLFxuICAgICAgICBmaWxlbmFtZTogXCJcIlxuICAgIH0sXG4gICAgdXNlcmxhbmRcbn0pO1xuXG4vLyMgc291cmNlTWFwcGluZ1VSTD1wYWdlcy1hcGkuanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(api)/./node_modules/next/dist/build/webpack/loaders/next-route-loader/index.js?kind=PAGES_API&page=%2Fapi%2Fask&preferredRegion=&absolutePagePath=.%2Fpages%5Capi%5Cask.ts&middlewareConfigBase64=e30%3D!\n");

/***/ }),

/***/ "(api)/./pages/api/ask.ts":
/*!**************************!*\
  !*** ./pages/api/ask.ts ***!
  \**************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.a(module, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ handler)\n/* harmony export */ });\n/* harmony import */ var _google_generative_ai__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @google/generative-ai */ \"@google/generative-ai\");\nvar __webpack_async_dependencies__ = __webpack_handle_async_dependencies__([_google_generative_ai__WEBPACK_IMPORTED_MODULE_0__]);\n_google_generative_ai__WEBPACK_IMPORTED_MODULE_0__ = (__webpack_async_dependencies__.then ? (await __webpack_async_dependencies__)() : __webpack_async_dependencies__)[0];\n\n// Initialize Gemini\nconst genAI = new _google_generative_ai__WEBPACK_IMPORTED_MODULE_0__.GoogleGenerativeAI(process.env.GEMINI_API_KEY || \"\");\n// RAG Service Configuration\nconst RAG_SERVICE_URL = process.env.RAG_SERVICE_URL || \"http://localhost:8000\";\n// Helper function to call RAG service\nasync function searchRAGDocuments(query, top_k = 5) {\n    try {\n        const response = await fetch(`${RAG_SERVICE_URL}/search`, {\n            method: \"POST\",\n            headers: {\n                \"Content-Type\": \"application/json\"\n            },\n            body: JSON.stringify({\n                query,\n                top_k\n            })\n        });\n        if (!response.ok) {\n            console.warn(\"RAG service not available, falling back to basic mode\");\n            return [];\n        }\n        const data = await response.json();\n        return data.results || [];\n    } catch (error) {\n        console.warn(\"Failed to connect to RAG service:\", error);\n        return [];\n    }\n}\n// Helper function to check if RAG service is available\nasync function checkRAGService() {\n    try {\n        const response = await fetch(`${RAG_SERVICE_URL}/health`, {\n            method: \"GET\"\n        });\n        return response.ok;\n    } catch (error) {\n        return false;\n    }\n}\nasync function handler(req, res) {\n    if (req.method === \"POST\") {\n        try {\n            const { question, selected_documents, use_rag = true } = req.body;\n            if (!question) {\n                return res.status(400).json({\n                    answer: \"\",\n                    error: \"Question is required\"\n                });\n            }\n            // Check if Gemini API key is configured\n            if (!process.env.GEMINI_API_KEY) {\n                return res.status(500).json({\n                    answer: \"\",\n                    error: \"Gemini API key not configured. Please add GEMINI_API_KEY to your .env.local file.\"\n                });\n            }\n            // Check if RAG service is available\n            const ragAvailable = use_rag && await checkRAGService();\n            // Get the Gemini model\n            const model = genAI.getGenerativeModel({\n                model: \"gemini-1.5-flash\"\n            });\n            let context = \"\";\n            let ragSources = [];\n            let retrievedChunks = 0;\n            if (ragAvailable) {\n                try {\n                    // Use RAG service to get relevant document chunks\n                    const ragResults = await searchRAGDocuments(question, 5);\n                    retrievedChunks = ragResults.length;\n                    if (ragResults.length > 0) {\n                        // Build rich context from retrieved chunks\n                        context = ragResults.map((result, index)=>`Document ${index + 1}: ${result.metadata.title}\r\nType: ${result.metadata.type} | Risk Type: ${result.metadata.risk_type}\r\nRelevance: ${(result.similarity_score * 100).toFixed(1)}%\r\n\r\nContent:\r\n${result.text}\r\n\r\n---`).join(\"\\n\\n\"); // Build sources from RAG results with document navigation\n                        ragSources = ragResults.map((result)=>({\n                                title: result.metadata.title,\n                                source_url: result.metadata.source_link || \"#\",\n                                regulation_type: result.metadata.level || \"Banking Regulation\",\n                                document_type: result.metadata.type,\n                                similarity_score: result.similarity_score,\n                                chunk_text: result.text.substring(0, 200) + \"...\",\n                                document_id: result.metadata.document_id,\n                                document_link: `#document-${result.metadata.document_id}`,\n                                view_in_documents: true // Flag to show \"View in Documents\" link\n                            }));\n                    }\n                } catch (error) {\n                    console.warn(\"RAG search failed, falling back to basic mode:\", error);\n                }\n            }\n            // Fallback: Build context from selected documents if no RAG results\n            if (!context && selected_documents && selected_documents.length > 0) {\n                context = `\\n\\nContext Documents Selected: ${selected_documents.join(\", \")}`;\n            }\n            // Create enhanced prompt with RAG context or fallback context\n            const prompt = ragAvailable && context ? `You are a banking regulation expert assistant. Use the provided document context to answer the user's question accurately and comprehensively.\r\n\r\nRETRIEVED DOCUMENT CONTEXT:\r\n${context}\r\n\r\nUSER QUESTION: ${question}\r\n\r\nINSTRUCTIONS:\r\n- Base your answer primarily on the provided document context above\r\n- Be specific and cite relevant information from the documents\r\n- Use **bold text** for key terms and important regulatory concepts\r\n- Use bullet points for lists of requirements or procedures  \r\n- Include specific document references when applicable\r\n- Keep response focused and under 300 words\r\n- Use proper markdown formatting\r\n\r\nIf the context doesn't contain sufficient information to answer the question, clearly state what information is missing and provide general guidance based on your banking regulation knowledge.\r\n\r\nANSWER:` : `You are a banking regulation expert. Answer this question directly and concisely using proper markdown formatting.\r\n\r\nQuestion: ${question}${context}\r\n\r\nRequirements:\r\n- Keep response under 150 words\r\n- Be direct and specific\r\n- Focus only on what was asked\r\n- Use **bold text** for key terms and important points\r\n- Use bullet points (- or *) for lists\r\n- Use proper markdown formatting for better readability\r\n- Avoid explanatory text about what you're doing\r\n\r\nAnswer:`; // Generate response using Gemini\n            const result = await model.generateContent(prompt);\n            const response = await result.response;\n            let answer = response.text();\n            // If response is too long, ask for a shorter version\n            if (answer.length > 800) {\n                const shorterPrompt = `Make this response much shorter and more direct (under 100 words):\r\n\r\n${answer}\r\n\r\nShorter version:`;\n                try {\n                    const shorterResult = await model.generateContent(shorterPrompt);\n                    const shorterResponse = await shorterResult.response;\n                    answer = shorterResponse.text();\n                } catch (error) {\n                    // If shortening fails, just truncate\n                    answer = answer.substring(0, 800) + \"...\";\n                }\n            }\n            // Use RAG sources if available, otherwise generate relevant sources\n            const sources = ragSources.length > 0 ? ragSources : generateRelevantSources(question);\n            // Enhanced response structure with RAG information\n            const responseData = {\n                answer,\n                sources,\n                context_documents_used: selected_documents?.length || sources.length,\n                confidence: ragAvailable && retrievedChunks > 0 ? \"95%\" : \"92%\",\n                rag_enabled: ragAvailable,\n                retrieved_chunks: retrievedChunks\n            };\n            return res.status(200).json(responseData);\n        } catch (error) {\n            console.error(\"Error calling Gemini API:\", error);\n            // Handle quota exceeded with a helpful mock response\n            if (error instanceof Error && (error.message.includes(\"quota\") || error.message.includes(\"429\"))) {\n                return res.status(200).json({\n                    answer: `# API Quota Exceeded - Mock Response\r\n\r\nI'm currently operating in **mock mode** because the Gemini API quota has been exceeded. This is a simulated response to demonstrate the application functionality.\r\n\r\n## Key Banking Regulation Points:\r\n\r\n- **Capital Requirements**: Banks must maintain minimum capital ratios under Basel III\r\n- **Liquidity Standards**: LCR and NSFR requirements ensure adequate funding  \r\n- **Risk Management**: Comprehensive frameworks for operational and credit risk\r\n- **Compliance**: Regular reporting and examination requirements\r\n\r\n### Important Notes:\r\n> This is a demonstration response. The actual AI service will resume when the API quota resets.\r\n\r\nFor more information, please refer to the \\`Federal Reserve\\` guidance documents.`,\n                    sources: [\n                        {\n                            title: \"Federal Reserve Regulation (Mock Source)\",\n                            source_url: \"https://www.federalreserve.gov/supervisionreg/\",\n                            regulation_type: \"Federal Reserve Guidance\",\n                            document_type: \"Guidelines\"\n                        }\n                    ],\n                    context_documents_used: 1,\n                    confidence: \"mock\"\n                });\n            }\n            return res.status(500).json({\n                answer: \"\",\n                error: \"Failed to generate response. Please check your API key and try again.\"\n            });\n        }\n    } else {\n        return res.status(405).json({\n            answer: \"\",\n            error: \"Method not allowed\"\n        });\n    }\n}\n// Helper function to generate relevant sources based on question keywords\nfunction generateRelevantSources(question) {\n    const lowerQuestion = question.toLowerCase();\n    if (lowerQuestion.includes(\"fry\")) {\n        return [\n            {\n                title: \"FRY-9C Instructions - Consolidated Financial Statements for Small Bank Holding Companies\",\n                source_url: \"https://www.federalreserve.gov/reportforms/forms/FR_Y-9C20240331_f.pdf\",\n                regulation_type: \"Federal Reserve Regulation\",\n                document_type: \"Regulatory Instructions\"\n            },\n            {\n                title: \"FRY-14A/Q Instructions - Recovery and Resolution Planning for Large Bank Holding Companies\",\n                source_url: \"https://www.federalreserve.gov/reportforms/forms/FR_Y-14A20240331_f.pdf\",\n                regulation_type: \"Federal Reserve Regulation\",\n                document_type: \"Regulatory Instructions\"\n            }\n        ];\n    } else if (lowerQuestion.includes(\"stress\")) {\n        return [\n            {\n                title: \"Capital Planning and Stress Testing Guidelines for Large Bank Holding Companies\",\n                source_url: \"https://www.federalreserve.gov/newsevents/pressreleases/bcreg20230629a.htm\",\n                regulation_type: \"Federal Reserve Regulation\",\n                document_type: \"Regulatory Guidance\"\n            }\n        ];\n    } else if (lowerQuestion.includes(\"liquidity\")) {\n        return [\n            {\n                title: \"Liquidity Coverage Ratio (LCR) Final Rule Implementation Guide\",\n                source_url: \"https://www.federalreserve.gov/newsevents/pressreleases/bcreg20140903a.htm\",\n                regulation_type: \"Federal Reserve Regulation\",\n                document_type: \"Regulatory Guidance\"\n            },\n            {\n                title: \"Net Stable Funding Ratio (NSFR) Requirements and Calculation Methods\",\n                source_url: \"https://www.federalreserve.gov/newsevents/pressreleases/bcreg20210520a.htm\",\n                regulation_type: \"Federal Reserve Regulation\",\n                document_type: \"Regulatory Guidance\"\n            }\n        ];\n    } else if (lowerQuestion.includes(\"cybersecurity\")) {\n        return [\n            {\n                title: \"Cybersecurity and Information Technology Risk Management Guidelines\",\n                source_url: \"https://www.federalreserve.gov/supervisionreg/srletters/sr2301.htm\",\n                regulation_type: \"Federal Reserve Regulation\",\n                document_type: \"Supervisory Guidance\"\n            }\n        ];\n    } else if (lowerQuestion.includes(\"model\")) {\n        return [\n            {\n                title: \"Model Risk Management Guidance for Banking Organizations\",\n                source_url: \"https://www.federalreserve.gov/supervisionreg/srletters/sr1107.htm\",\n                regulation_type: \"Federal Reserve Regulation\",\n                document_type: \"Supervisory Guidance\"\n            }\n        ];\n    } else if (lowerQuestion.includes(\"compliance\") || lowerQuestion.includes(\"aml\") || lowerQuestion.includes(\"bsa\")) {\n        return [\n            {\n                title: \"Anti-Money Laundering Program Requirements and Examination Procedures\",\n                source_url: \"https://www.fincen.gov/resources/statutes-regulations/guidance/application-fincens-regulations-certain-business-models\",\n                regulation_type: \"FinCEN Regulation\",\n                document_type: \"Regulatory Guidance\"\n            }\n        ];\n    } else if (lowerQuestion.includes(\"capital\")) {\n        return [\n            {\n                title: \"Capital Planning and Stress Testing Guidelines for Large Bank Holding Companies\",\n                source_url: \"https://www.federalreserve.gov/newsevents/pressreleases/bcreg20230629a.htm\",\n                regulation_type: \"Federal Reserve Regulation\",\n                document_type: \"Regulatory Guidance\"\n            }\n        ];\n    }\n    // Default sources for general banking regulation questions\n    return [\n        {\n            title: \"Federal Banking Regulation - Supervisory Guidance\",\n            source_url: \"https://www.federalreserve.gov/supervisionreg/srletters/sr2301.htm\",\n            regulation_type: \"Federal Banking Regulation\",\n            document_type: \"Supervisory Guidance\"\n        }\n    ];\n}\n\n__webpack_async_result__();\n} catch(e) { __webpack_async_result__(e); } });//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(api)/./pages/api/ask.ts\n");

/***/ })

};
;

// load runtime
var __webpack_require__ = require("../../webpack-api-runtime.js");
__webpack_require__.C(exports);
var __webpack_exec__ = (moduleId) => (__webpack_require__(__webpack_require__.s = moduleId))
var __webpack_exports__ = __webpack_require__.X(0, ["vendor-chunks/next"], () => (__webpack_exec__("(api)/./node_modules/next/dist/build/webpack/loaders/next-route-loader/index.js?kind=PAGES_API&page=%2Fapi%2Fask&preferredRegion=&absolutePagePath=.%2Fpages%5Capi%5Cask.ts&middlewareConfigBase64=e30%3D!")));
module.exports = __webpack_exports__;

})();