"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(() => {
var exports = {};
exports.id = "pages/api/excel/parse";
exports.ids = ["pages/api/excel/parse"];
exports.modules = {

/***/ "next/dist/compiled/next-server/pages-api.runtime.dev.js":
/*!**************************************************************************!*\
  !*** external "next/dist/compiled/next-server/pages-api.runtime.dev.js" ***!
  \**************************************************************************/
/***/ ((module) => {

module.exports = require("next/dist/compiled/next-server/pages-api.runtime.dev.js");

/***/ }),

/***/ "xlsx":
/*!***********************!*\
  !*** external "xlsx" ***!
  \***********************/
/***/ ((module) => {

module.exports = require("xlsx");

/***/ }),

/***/ "formidable":
/*!*****************************!*\
  !*** external "formidable" ***!
  \*****************************/
/***/ ((module) => {

module.exports = import("formidable");;

/***/ }),

/***/ "fs":
/*!*********************!*\
  !*** external "fs" ***!
  \*********************/
/***/ ((module) => {

module.exports = require("fs");

/***/ }),

/***/ "(api)/./node_modules/next/dist/build/webpack/loaders/next-route-loader/index.js?kind=PAGES_API&page=%2Fapi%2Fexcel%2Fparse&preferredRegion=&absolutePagePath=.%2Fpages%5Capi%5Cexcel%5Cparse.ts&middlewareConfigBase64=e30%3D!":
/*!********************************************************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/next/dist/build/webpack/loaders/next-route-loader/index.js?kind=PAGES_API&page=%2Fapi%2Fexcel%2Fparse&preferredRegion=&absolutePagePath=.%2Fpages%5Capi%5Cexcel%5Cparse.ts&middlewareConfigBase64=e30%3D! ***!
  \********************************************************************************************************************************************************************************************************************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.a(module, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   config: () => (/* binding */ config),\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__),\n/* harmony export */   routeModule: () => (/* binding */ routeModule)\n/* harmony export */ });\n/* harmony import */ var next_dist_server_future_route_modules_pages_api_module_compiled__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! next/dist/server/future/route-modules/pages-api/module.compiled */ \"(api)/./node_modules/next/dist/server/future/route-modules/pages-api/module.compiled.js\");\n/* harmony import */ var next_dist_server_future_route_modules_pages_api_module_compiled__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_future_route_modules_pages_api_module_compiled__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var next_dist_server_future_route_kind__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! next/dist/server/future/route-kind */ \"(api)/./node_modules/next/dist/server/future/route-kind.js\");\n/* harmony import */ var next_dist_build_templates_helpers__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! next/dist/build/templates/helpers */ \"(api)/./node_modules/next/dist/build/templates/helpers.js\");\n/* harmony import */ var _pages_api_excel_parse_ts__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./pages\\api\\excel\\parse.ts */ \"(api)/./pages/api/excel/parse.ts\");\nvar __webpack_async_dependencies__ = __webpack_handle_async_dependencies__([_pages_api_excel_parse_ts__WEBPACK_IMPORTED_MODULE_3__]);\n_pages_api_excel_parse_ts__WEBPACK_IMPORTED_MODULE_3__ = (__webpack_async_dependencies__.then ? (await __webpack_async_dependencies__)() : __webpack_async_dependencies__)[0];\n\n\n\n// Import the userland code.\n\n// Re-export the handler (should be the default export).\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ((0,next_dist_build_templates_helpers__WEBPACK_IMPORTED_MODULE_2__.hoist)(_pages_api_excel_parse_ts__WEBPACK_IMPORTED_MODULE_3__, \"default\"));\n// Re-export config.\nconst config = (0,next_dist_build_templates_helpers__WEBPACK_IMPORTED_MODULE_2__.hoist)(_pages_api_excel_parse_ts__WEBPACK_IMPORTED_MODULE_3__, \"config\");\n// Create and export the route module that will be consumed.\nconst routeModule = new next_dist_server_future_route_modules_pages_api_module_compiled__WEBPACK_IMPORTED_MODULE_0__.PagesAPIRouteModule({\n    definition: {\n        kind: next_dist_server_future_route_kind__WEBPACK_IMPORTED_MODULE_1__.RouteKind.PAGES_API,\n        page: \"/api/excel/parse\",\n        pathname: \"/api/excel/parse\",\n        // The following aren't used in production.\n        bundlePath: \"\",\n        filename: \"\"\n    },\n    userland: _pages_api_excel_parse_ts__WEBPACK_IMPORTED_MODULE_3__\n});\n\n//# sourceMappingURL=pages-api.js.map\n__webpack_async_result__();\n} catch(e) { __webpack_async_result__(e); } });//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwaSkvLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L2J1aWxkL3dlYnBhY2svbG9hZGVycy9uZXh0LXJvdXRlLWxvYWRlci9pbmRleC5qcz9raW5kPVBBR0VTX0FQSSZwYWdlPSUyRmFwaSUyRmV4Y2VsJTJGcGFyc2UmcHJlZmVycmVkUmVnaW9uPSZhYnNvbHV0ZVBhZ2VQYXRoPS4lMkZwYWdlcyU1Q2FwaSU1Q2V4Y2VsJTVDcGFyc2UudHMmbWlkZGxld2FyZUNvbmZpZ0Jhc2U2ND1lMzAlM0QhIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7O0FBQXNHO0FBQ3ZDO0FBQ0w7QUFDMUQ7QUFDMEQ7QUFDMUQ7QUFDQSxpRUFBZSx3RUFBSyxDQUFDLHNEQUFRLFlBQVksRUFBQztBQUMxQztBQUNPLGVBQWUsd0VBQUssQ0FBQyxzREFBUTtBQUNwQztBQUNPLHdCQUF3QixnSEFBbUI7QUFDbEQ7QUFDQSxjQUFjLHlFQUFTO0FBQ3ZCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0wsWUFBWTtBQUNaLENBQUM7O0FBRUQscUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9yZS1nZW50LWZyb250ZW5kLz8yMWZkIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFBhZ2VzQVBJUm91dGVNb2R1bGUgfSBmcm9tIFwibmV4dC9kaXN0L3NlcnZlci9mdXR1cmUvcm91dGUtbW9kdWxlcy9wYWdlcy1hcGkvbW9kdWxlLmNvbXBpbGVkXCI7XG5pbXBvcnQgeyBSb3V0ZUtpbmQgfSBmcm9tIFwibmV4dC9kaXN0L3NlcnZlci9mdXR1cmUvcm91dGUta2luZFwiO1xuaW1wb3J0IHsgaG9pc3QgfSBmcm9tIFwibmV4dC9kaXN0L2J1aWxkL3RlbXBsYXRlcy9oZWxwZXJzXCI7XG4vLyBJbXBvcnQgdGhlIHVzZXJsYW5kIGNvZGUuXG5pbXBvcnQgKiBhcyB1c2VybGFuZCBmcm9tIFwiLi9wYWdlc1xcXFxhcGlcXFxcZXhjZWxcXFxccGFyc2UudHNcIjtcbi8vIFJlLWV4cG9ydCB0aGUgaGFuZGxlciAoc2hvdWxkIGJlIHRoZSBkZWZhdWx0IGV4cG9ydCkuXG5leHBvcnQgZGVmYXVsdCBob2lzdCh1c2VybGFuZCwgXCJkZWZhdWx0XCIpO1xuLy8gUmUtZXhwb3J0IGNvbmZpZy5cbmV4cG9ydCBjb25zdCBjb25maWcgPSBob2lzdCh1c2VybGFuZCwgXCJjb25maWdcIik7XG4vLyBDcmVhdGUgYW5kIGV4cG9ydCB0aGUgcm91dGUgbW9kdWxlIHRoYXQgd2lsbCBiZSBjb25zdW1lZC5cbmV4cG9ydCBjb25zdCByb3V0ZU1vZHVsZSA9IG5ldyBQYWdlc0FQSVJvdXRlTW9kdWxlKHtcbiAgICBkZWZpbml0aW9uOiB7XG4gICAgICAgIGtpbmQ6IFJvdXRlS2luZC5QQUdFU19BUEksXG4gICAgICAgIHBhZ2U6IFwiL2FwaS9leGNlbC9wYXJzZVwiLFxuICAgICAgICBwYXRobmFtZTogXCIvYXBpL2V4Y2VsL3BhcnNlXCIsXG4gICAgICAgIC8vIFRoZSBmb2xsb3dpbmcgYXJlbid0IHVzZWQgaW4gcHJvZHVjdGlvbi5cbiAgICAgICAgYnVuZGxlUGF0aDogXCJcIixcbiAgICAgICAgZmlsZW5hbWU6IFwiXCJcbiAgICB9LFxuICAgIHVzZXJsYW5kXG59KTtcblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9cGFnZXMtYXBpLmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(api)/./node_modules/next/dist/build/webpack/loaders/next-route-loader/index.js?kind=PAGES_API&page=%2Fapi%2Fexcel%2Fparse&preferredRegion=&absolutePagePath=.%2Fpages%5Capi%5Cexcel%5Cparse.ts&middlewareConfigBase64=e30%3D!\n");

/***/ }),

/***/ "(api)/./pages/api/excel/parse.ts":
/*!**********************************!*\
  !*** ./pages/api/excel/parse.ts ***!
  \**********************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.a(module, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   config: () => (/* binding */ config),\n/* harmony export */   \"default\": () => (/* binding */ handler)\n/* harmony export */ });\n/* harmony import */ var xlsx__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! xlsx */ \"xlsx\");\n/* harmony import */ var xlsx__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(xlsx__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var formidable__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! formidable */ \"formidable\");\n/* harmony import */ var fs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! fs */ \"fs\");\n/* harmony import */ var fs__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(fs__WEBPACK_IMPORTED_MODULE_2__);\nvar __webpack_async_dependencies__ = __webpack_handle_async_dependencies__([formidable__WEBPACK_IMPORTED_MODULE_1__]);\nformidable__WEBPACK_IMPORTED_MODULE_1__ = (__webpack_async_dependencies__.then ? (await __webpack_async_dependencies__)() : __webpack_async_dependencies__)[0];\n\n\n\n// Disable default body parser for file uploads\nconst config = {\n    api: {\n        bodyParser: false\n    }\n};\nfunction parseExcelFile(buffer, filename) {\n    console.log(\"Parsing Excel file:\", filename, \"Buffer size:\", buffer.length);\n    try {\n        const workbook = xlsx__WEBPACK_IMPORTED_MODULE_0__.read(buffer, {\n            type: \"buffer\",\n            cellFormula: true,\n            cellStyles: true,\n            cellDates: true,\n            cellNF: false\n        });\n        console.log(\"Workbook sheets found:\", workbook.SheetNames);\n        const sheets = workbook.SheetNames.map((sheetName, index)=>{\n            console.log(\"Processing sheet:\", sheetName);\n            const worksheet = workbook.Sheets[sheetName];\n            if (!worksheet) {\n                console.warn(\"Worksheet is empty:\", sheetName);\n                return null;\n            }\n            const jsonData = xlsx__WEBPACK_IMPORTED_MODULE_0__.utils.sheet_to_json(worksheet, {\n                header: 1,\n                raw: false,\n                defval: null,\n                blankrows: false\n            });\n            // Get the range of the worksheet\n            const range = worksheet[\"!ref\"] ? xlsx__WEBPACK_IMPORTED_MODULE_0__.utils.decode_range(worksheet[\"!ref\"]) : {\n                s: {\n                    r: 0,\n                    c: 0\n                },\n                e: {\n                    r: 0,\n                    c: 0\n                }\n            };\n            const rowCount = Math.max(jsonData.length, range.e.r + 1);\n            const columnCount = Math.max(range.e.c + 1, Math.max(...jsonData.map((row)=>row.length)));\n            console.log(`Sheet ${sheetName}: ${rowCount} rows, ${columnCount} columns`);\n            // Extract headers (first row) - handle empty rows\n            const headers = jsonData.length > 0 ? jsonData[0] || [] : [];\n            // Convert to our ExcelCell format with better error handling\n            const data = [];\n            for(let row = 0; row < rowCount; row++){\n                const rowData = [];\n                for(let col = 0; col < columnCount; col++){\n                    const cellAddress = xlsx__WEBPACK_IMPORTED_MODULE_0__.utils.encode_cell({\n                        r: row,\n                        c: col\n                    });\n                    const cell = worksheet[cellAddress];\n                    let cellValue = null;\n                    let cellType = \"empty\";\n                    let formula;\n                    if (cell) {\n                        try {\n                            if (cell.f) {\n                                formula = cell.f;\n                                cellType = \"formula\";\n                                cellValue = cell.v !== undefined ? cell.v : cell.w || \"\";\n                            } else if (cell.v !== undefined) {\n                                cellValue = cell.v;\n                                if (typeof cell.v === \"string\") cellType = \"string\";\n                                else if (typeof cell.v === \"number\") cellType = \"number\";\n                                else if (typeof cell.v === \"boolean\") cellType = \"boolean\";\n                                else if (cell.v instanceof Date || cell.t === \"d\") cellType = \"date\";\n                                else cellType = \"string\"; // fallback\n                            }\n                        } catch (cellError) {\n                            console.warn(`Error processing cell ${cellAddress}:`, cellError);\n                            cellValue = cell.w || cell.v || \"\";\n                            cellType = \"string\";\n                        }\n                    }\n                    rowData.push({\n                        value: cellValue,\n                        type: cellType,\n                        address: cellAddress,\n                        formula\n                    });\n                }\n                data.push(rowData);\n            }\n            // Analyze data types for each column with better detection\n            const dataTypes = headers.map((header, colIndex)=>{\n                const columnData = data.slice(1).map((row)=>row[colIndex]?.value).filter((v)=>v !== null && v !== undefined && v !== \"\");\n                const uniqueValues = Array.from(new Set(columnData));\n                // Determine data type with improved logic\n                let dataType = \"text\";\n                if (columnData.length > 0) {\n                    const numberCount = columnData.filter((v)=>typeof v === \"number\" || !isNaN(Number(v)) && v !== \"\").length;\n                    const dateCount = columnData.filter((v)=>{\n                        if (v instanceof Date) return true;\n                        if (typeof v === \"string\") {\n                            const dateTest = new Date(v);\n                            return !isNaN(dateTest.getTime()) && v.match(/\\d{1,4}[-\\/]\\d{1,2}[-\\/]\\d{1,4}/);\n                        }\n                        return false;\n                    }).length;\n                    if (numberCount / columnData.length > 0.7) dataType = \"number\";\n                    else if (dateCount / columnData.length > 0.7) dataType = \"date\";\n                }\n                return {\n                    columnIndex: colIndex,\n                    columnLetter: xlsx__WEBPACK_IMPORTED_MODULE_0__.utils.encode_col(colIndex),\n                    header: header || `Column ${colIndex + 1}`,\n                    dataType,\n                    sampleValues: uniqueValues.slice(0, 5),\n                    uniqueCount: uniqueValues.length,\n                    nullCount: data.slice(1).length - columnData.length\n                };\n            });\n            // Extract formula cells with better error handling\n            const formulaCells = [];\n            data.forEach((row, rowIndex)=>{\n                row.forEach((cell, colIndex)=>{\n                    if (cell.formula) {\n                        try {\n                            formulaCells.push({\n                                address: cell.address,\n                                formula: cell.formula,\n                                dependencies: extractFormulaDependencies(cell.formula),\n                                result: cell.value\n                            });\n                        } catch (formulaError) {\n                            console.warn(`Error processing formula in cell ${cell.address}:`, formulaError);\n                        }\n                    }\n                });\n            });\n            console.log(`Sheet ${sheetName} processed: ${formulaCells.length} formulas found`);\n            return {\n                id: `sheet_${index}`,\n                name: sheetName,\n                data,\n                headers,\n                rowCount,\n                columnCount,\n                dataTypes,\n                hasFormulas: formulaCells.length > 0,\n                formulaCells\n            };\n        }).filter((sheet)=>sheet !== null); // Remove any null sheets  \n        const finalWorkbook = {\n            id: `workbook_${Date.now()}`,\n            name: filename,\n            sheets,\n            uploadDate: new Date(),\n            fileSize: buffer.length,\n            lastModified: new Date()\n        };\n        console.log(\"Final workbook created:\", {\n            name: finalWorkbook.name,\n            sheetsCount: finalWorkbook.sheets.length,\n            totalFormulas: finalWorkbook.sheets.reduce((sum, s)=>sum + s.formulaCells.length, 0)\n        });\n        return finalWorkbook;\n    } catch (error) {\n        console.error(\"Error parsing Excel file:\", error);\n        throw new Error(`Failed to parse Excel file: ${error.message}`);\n    }\n}\nfunction extractFormulaDependencies(formula) {\n    // Simple regex to extract cell references like A1, B2, $A$1, etc.\n    const cellRefRegex = /\\$?[A-Z]+\\$?\\d+/g;\n    const matches = formula.match(cellRefRegex) || [];\n    return Array.from(new Set(matches));\n}\nasync function handler(req, res) {\n    if (req.method !== \"POST\") {\n        return res.status(405).json({\n            error: \"Method not allowed\"\n        });\n    }\n    try {\n        const form = new formidable__WEBPACK_IMPORTED_MODULE_1__.IncomingForm({\n            keepExtensions: true,\n            maxFileSize: 50 * 1024 * 1024,\n            multiples: true\n        });\n        const { files } = await new Promise((resolve, reject)=>{\n            form.parse(req, (err, fields, files)=>{\n                if (err) {\n                    console.error(\"Form parse error:\", err);\n                    reject(err);\n                } else {\n                    resolve({\n                        files\n                    });\n                }\n            });\n        });\n        console.log(\"Received files:\", Object.keys(files));\n        // Handle both single file and array of files\n        let excelFile = files.excel;\n        if (Array.isArray(excelFile)) {\n            excelFile = excelFile[0];\n        }\n        if (!excelFile) {\n            console.log(\"No excel file found in:\", files);\n            return res.status(400).json({\n                error: \"No Excel file uploaded\"\n            });\n        }\n        console.log(\"Processing file:\", excelFile.originalFilename, \"Size:\", excelFile.size);\n        // Read the file buffer\n        const buffer = fs__WEBPACK_IMPORTED_MODULE_2___default().readFileSync(excelFile.filepath);\n        // Parse the Excel file\n        const workbook = parseExcelFile(buffer, excelFile.originalFilename || \"unknown.xlsx\");\n        res.status(200).json(workbook);\n    } catch (error) {\n        console.error(\"Error parsing Excel file:\", error);\n        res.status(500).json({\n            error: \"Failed to parse Excel file\",\n            details: error.message\n        });\n    }\n}\n\n__webpack_async_result__();\n} catch(e) { __webpack_async_result__(e); } });//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(api)/./pages/api/excel/parse.ts\n");

/***/ })

};
;

// load runtime
var __webpack_require__ = require("../../../webpack-api-runtime.js");
__webpack_require__.C(exports);
var __webpack_exec__ = (moduleId) => (__webpack_require__(__webpack_require__.s = moduleId))
var __webpack_exports__ = __webpack_require__.X(0, ["vendor-chunks/next"], () => (__webpack_exec__("(api)/./node_modules/next/dist/build/webpack/loaders/next-route-loader/index.js?kind=PAGES_API&page=%2Fapi%2Fexcel%2Fparse&preferredRegion=&absolutePagePath=.%2Fpages%5Capi%5Cexcel%5Cparse.ts&middlewareConfigBase64=e30%3D!")));
module.exports = __webpack_exports__;

})();