"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(() => {
var exports = {};
exports.id = "pages/api/excel/powerquery";
exports.ids = ["pages/api/excel/powerquery"];
exports.modules = {

/***/ "next/dist/compiled/next-server/pages-api.runtime.dev.js":
/*!**************************************************************************!*\
  !*** external "next/dist/compiled/next-server/pages-api.runtime.dev.js" ***!
  \**************************************************************************/
/***/ ((module) => {

module.exports = require("next/dist/compiled/next-server/pages-api.runtime.dev.js");

/***/ }),

/***/ "(api)/./node_modules/next/dist/build/webpack/loaders/next-route-loader/index.js?kind=PAGES_API&page=%2Fapi%2Fexcel%2Fpowerquery&preferredRegion=&absolutePagePath=.%2Fpages%5Capi%5Cexcel%5Cpowerquery.ts&middlewareConfigBase64=e30%3D!":
/*!******************************************************************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/next/dist/build/webpack/loaders/next-route-loader/index.js?kind=PAGES_API&page=%2Fapi%2Fexcel%2Fpowerquery&preferredRegion=&absolutePagePath=.%2Fpages%5Capi%5Cexcel%5Cpowerquery.ts&middlewareConfigBase64=e30%3D! ***!
  \******************************************************************************************************************************************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   config: () => (/* binding */ config),\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__),\n/* harmony export */   routeModule: () => (/* binding */ routeModule)\n/* harmony export */ });\n/* harmony import */ var next_dist_server_future_route_modules_pages_api_module_compiled__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! next/dist/server/future/route-modules/pages-api/module.compiled */ \"(api)/./node_modules/next/dist/server/future/route-modules/pages-api/module.compiled.js\");\n/* harmony import */ var next_dist_server_future_route_modules_pages_api_module_compiled__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_future_route_modules_pages_api_module_compiled__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var next_dist_server_future_route_kind__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! next/dist/server/future/route-kind */ \"(api)/./node_modules/next/dist/server/future/route-kind.js\");\n/* harmony import */ var next_dist_build_templates_helpers__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! next/dist/build/templates/helpers */ \"(api)/./node_modules/next/dist/build/templates/helpers.js\");\n/* harmony import */ var _pages_api_excel_powerquery_ts__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./pages\\api\\excel\\powerquery.ts */ \"(api)/./pages/api/excel/powerquery.ts\");\n\n\n\n// Import the userland code.\n\n// Re-export the handler (should be the default export).\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ((0,next_dist_build_templates_helpers__WEBPACK_IMPORTED_MODULE_2__.hoist)(_pages_api_excel_powerquery_ts__WEBPACK_IMPORTED_MODULE_3__, \"default\"));\n// Re-export config.\nconst config = (0,next_dist_build_templates_helpers__WEBPACK_IMPORTED_MODULE_2__.hoist)(_pages_api_excel_powerquery_ts__WEBPACK_IMPORTED_MODULE_3__, \"config\");\n// Create and export the route module that will be consumed.\nconst routeModule = new next_dist_server_future_route_modules_pages_api_module_compiled__WEBPACK_IMPORTED_MODULE_0__.PagesAPIRouteModule({\n    definition: {\n        kind: next_dist_server_future_route_kind__WEBPACK_IMPORTED_MODULE_1__.RouteKind.PAGES_API,\n        page: \"/api/excel/powerquery\",\n        pathname: \"/api/excel/powerquery\",\n        // The following aren't used in production.\n        bundlePath: \"\",\n        filename: \"\"\n    },\n    userland: _pages_api_excel_powerquery_ts__WEBPACK_IMPORTED_MODULE_3__\n});\n\n//# sourceMappingURL=pages-api.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwaSkvLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L2J1aWxkL3dlYnBhY2svbG9hZGVycy9uZXh0LXJvdXRlLWxvYWRlci9pbmRleC5qcz9raW5kPVBBR0VTX0FQSSZwYWdlPSUyRmFwaSUyRmV4Y2VsJTJGcG93ZXJxdWVyeSZwcmVmZXJyZWRSZWdpb249JmFic29sdXRlUGFnZVBhdGg9LiUyRnBhZ2VzJTVDYXBpJTVDZXhjZWwlNUNwb3dlcnF1ZXJ5LnRzJm1pZGRsZXdhcmVDb25maWdCYXNlNjQ9ZTMwJTNEISIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7OztBQUFzRztBQUN2QztBQUNMO0FBQzFEO0FBQytEO0FBQy9EO0FBQ0EsaUVBQWUsd0VBQUssQ0FBQywyREFBUSxZQUFZLEVBQUM7QUFDMUM7QUFDTyxlQUFlLHdFQUFLLENBQUMsMkRBQVE7QUFDcEM7QUFDTyx3QkFBd0IsZ0hBQW1CO0FBQ2xEO0FBQ0EsY0FBYyx5RUFBUztBQUN2QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMLFlBQVk7QUFDWixDQUFDOztBQUVEIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZnJvbnRlbmQvPzNjMGIiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgUGFnZXNBUElSb3V0ZU1vZHVsZSB9IGZyb20gXCJuZXh0L2Rpc3Qvc2VydmVyL2Z1dHVyZS9yb3V0ZS1tb2R1bGVzL3BhZ2VzLWFwaS9tb2R1bGUuY29tcGlsZWRcIjtcbmltcG9ydCB7IFJvdXRlS2luZCB9IGZyb20gXCJuZXh0L2Rpc3Qvc2VydmVyL2Z1dHVyZS9yb3V0ZS1raW5kXCI7XG5pbXBvcnQgeyBob2lzdCB9IGZyb20gXCJuZXh0L2Rpc3QvYnVpbGQvdGVtcGxhdGVzL2hlbHBlcnNcIjtcbi8vIEltcG9ydCB0aGUgdXNlcmxhbmQgY29kZS5cbmltcG9ydCAqIGFzIHVzZXJsYW5kIGZyb20gXCIuL3BhZ2VzXFxcXGFwaVxcXFxleGNlbFxcXFxwb3dlcnF1ZXJ5LnRzXCI7XG4vLyBSZS1leHBvcnQgdGhlIGhhbmRsZXIgKHNob3VsZCBiZSB0aGUgZGVmYXVsdCBleHBvcnQpLlxuZXhwb3J0IGRlZmF1bHQgaG9pc3QodXNlcmxhbmQsIFwiZGVmYXVsdFwiKTtcbi8vIFJlLWV4cG9ydCBjb25maWcuXG5leHBvcnQgY29uc3QgY29uZmlnID0gaG9pc3QodXNlcmxhbmQsIFwiY29uZmlnXCIpO1xuLy8gQ3JlYXRlIGFuZCBleHBvcnQgdGhlIHJvdXRlIG1vZHVsZSB0aGF0IHdpbGwgYmUgY29uc3VtZWQuXG5leHBvcnQgY29uc3Qgcm91dGVNb2R1bGUgPSBuZXcgUGFnZXNBUElSb3V0ZU1vZHVsZSh7XG4gICAgZGVmaW5pdGlvbjoge1xuICAgICAgICBraW5kOiBSb3V0ZUtpbmQuUEFHRVNfQVBJLFxuICAgICAgICBwYWdlOiBcIi9hcGkvZXhjZWwvcG93ZXJxdWVyeVwiLFxuICAgICAgICBwYXRobmFtZTogXCIvYXBpL2V4Y2VsL3Bvd2VycXVlcnlcIixcbiAgICAgICAgLy8gVGhlIGZvbGxvd2luZyBhcmVuJ3QgdXNlZCBpbiBwcm9kdWN0aW9uLlxuICAgICAgICBidW5kbGVQYXRoOiBcIlwiLFxuICAgICAgICBmaWxlbmFtZTogXCJcIlxuICAgIH0sXG4gICAgdXNlcmxhbmRcbn0pO1xuXG4vLyMgc291cmNlTWFwcGluZ1VSTD1wYWdlcy1hcGkuanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(api)/./node_modules/next/dist/build/webpack/loaders/next-route-loader/index.js?kind=PAGES_API&page=%2Fapi%2Fexcel%2Fpowerquery&preferredRegion=&absolutePagePath=.%2Fpages%5Capi%5Cexcel%5Cpowerquery.ts&middlewareConfigBase64=e30%3D!\n");

/***/ }),

/***/ "(api)/./pages/api/excel/powerquery.ts":
/*!***************************************!*\
  !*** ./pages/api/excel/powerquery.ts ***!
  \***************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ handler)\n/* harmony export */ });\nasync function handler(req, res) {\n    if (req.method !== \"POST\") {\n        return res.status(405).json({\n            error: \"Method not allowed\"\n        });\n    }\n    try {\n        const { operation, parameters, currentSteps, template, workbook } = req.body;\n        // Handle template-based M Code generation\n        if (template) {\n            const templateCode = generateTemplateCode(template, workbook);\n            return res.status(200).json({\n                templateCode,\n                steps: [],\n                previewData: generatePreviewData(template)\n            });\n        }\n        if (!operation) {\n            return res.status(400).json({\n                error: \"Operation is required\"\n            });\n        }\n        // Simulate processing time\n        await new Promise((resolve)=>setTimeout(resolve, 1000));\n        let newStep;\n        switch(operation){\n            case \"filter\":\n                newStep = {\n                    id: `step_${Date.now()}`,\n                    name: `Filter ${parameters.column}`,\n                    operation: \"filter\",\n                    mCode: `Table.SelectRows(#\"Previous Step\", each [${parameters.column}] ${parameters.operator} \"${parameters.value}\")`,\n                    description: `Filter rows where ${parameters.column} ${parameters.operator} ${parameters.value}`,\n                    isApplied: false\n                };\n                break;\n            case \"sort\":\n                newStep = {\n                    id: `step_${Date.now()}`,\n                    name: `Sort by ${parameters.column}`,\n                    operation: \"sort\",\n                    mCode: `Table.Sort(#\"Previous Step\",{{\"${parameters.column}\", Order.${parameters.direction || \"Ascending\"}\"}})`,\n                    description: `Sort by ${parameters.column} in ${parameters.direction || \"ascending\"} order`,\n                    isApplied: false\n                };\n                break;\n            case \"group\":\n                newStep = {\n                    id: `step_${Date.now()}`,\n                    name: `Group by ${parameters.groupColumn}`,\n                    operation: \"group\",\n                    mCode: `Table.Group(#\"Previous Step\", {\"${parameters.groupColumn}\"}, {{\"${parameters.aggregateColumn}_Sum\", each List.Sum([${parameters.aggregateColumn}]), type number}})`,\n                    description: `Group by ${parameters.groupColumn} and sum ${parameters.aggregateColumn}`,\n                    isApplied: false\n                };\n                break;\n            case \"add_column\":\n                newStep = {\n                    id: `step_${Date.now()}`,\n                    name: `Add ${parameters.columnName}`,\n                    operation: \"add_column\",\n                    mCode: `Table.AddColumn(#\"Previous Step\", \"${parameters.columnName}\", each ${parameters.formula})`,\n                    description: `Add calculated column: ${parameters.columnName}`,\n                    isApplied: false\n                };\n                break;\n            case \"replace\":\n                newStep = {\n                    id: `step_${Date.now()}`,\n                    name: `Replace in ${parameters.column}`,\n                    operation: \"replace\",\n                    mCode: `Table.ReplaceValue(#\"Previous Step\",\"${parameters.oldValue}\",\"${parameters.newValue}\",Replacer.ReplaceText,{\"${parameters.column}\"})`,\n                    description: `Replace \"${parameters.oldValue}\" with \"${parameters.newValue}\" in ${parameters.column}`,\n                    isApplied: false\n                };\n                break;\n            case \"remove\":\n                newStep = {\n                    id: `step_${Date.now()}`,\n                    name: `Remove ${parameters.columns?.join(\", \")}`,\n                    operation: \"remove\",\n                    mCode: `Table.RemoveColumns(#\"Previous Step\",{${parameters.columns?.map((col)=>`\"${col}\"`).join(\", \")}})`,\n                    description: `Remove columns: ${parameters.columns?.join(\", \")}`,\n                    isApplied: false\n                };\n                break;\n            case \"dataTypes\":\n                const typeChanges = parameters.typeChanges?.map((change)=>`{\"${change.column}\", type ${change.type}}`).join(\", \");\n                newStep = {\n                    id: `step_${Date.now()}`,\n                    name: \"Change Data Types\",\n                    operation: \"dataTypes\",\n                    mCode: `Table.TransformColumnTypes(#\"Previous Step\",{${typeChanges}})`,\n                    description: \"Change column data types\",\n                    isApplied: false\n                };\n                break;\n            default:\n                return res.status(400).json({\n                    error: \"Unsupported operation\"\n                });\n        }\n        // Generate preview data (mock)\n        const previewData = [\n            [\n                \"Product\",\n                \"Category\",\n                \"Sales\",\n                \"Date\"\n            ],\n            [\n                \"Laptop\",\n                \"Electronics\",\n                1200,\n                \"2024-01-15\"\n            ],\n            [\n                \"Phone\",\n                \"Electronics\",\n                800,\n                \"2024-01-16\"\n            ],\n            [\n                \"Desk\",\n                \"Furniture\",\n                350,\n                \"2024-01-17\"\n            ],\n            [\n                \"Chair\",\n                \"Furniture\",\n                150,\n                \"2024-01-18\"\n            ]\n        ];\n        // Generate complete M code for all steps\n        const allSteps = [\n            ...currentSteps || [],\n            newStep\n        ];\n        const mCode = generateCompleteMCode(allSteps);\n        res.status(200).json({\n            step: newStep,\n            previewData,\n            completeMCode: mCode\n        });\n    } catch (error) {\n        console.error(\"Error generating PowerQuery step:\", error);\n        res.status(500).json({\n            error: \"Failed to generate PowerQuery step\"\n        });\n    }\n}\nfunction generateCompleteMCode(steps) {\n    let mCode = `let\r\n    Source = Excel.CurrentWorkbook(){[Name=\"Table1\"]}[Content],`;\n    steps.forEach((step, index)=>{\n        const stepName = step.name.replace(/\\s+/g, \" \");\n        const previousStep = index === 0 ? \"Source\" : `#\"${steps[index - 1].name.replace(/\\s+/g, \" \")}\"`;\n        // Replace \"Previous Step\" with actual step reference\n        const stepCode = step.mCode.replace('#\"Previous Step\"', previousStep);\n        mCode += `\r\n    #\"${stepName}\" = ${stepCode},`;\n    });\n    // Remove trailing comma and add the final step reference\n    mCode = mCode.slice(0, -1);\n    const lastStepName = steps.length > 0 ? steps[steps.length - 1].name.replace(/\\s+/g, \" \") : \"Source\";\n    mCode += `\r\nin\r\n    #\"${lastStepName}\"`;\n    return mCode;\n}\nfunction generateTemplateCode(template, workbook) {\n    switch(template){\n        case \"data_cleaning\":\n            return `let\r\n    Source = Excel.CurrentWorkbook(){[Name=\"Sheet1\"]}[Content],\r\n    #\"Promoted Headers\" = Table.PromoteHeaders(Source, [PromoteAllScalars=true]),\r\n    #\"Trimmed Text\" = Table.TransformColumns(#\"Promoted Headers\",{},Text.Trim),\r\n    #\"Cleaned Text\" = Table.TransformColumns(#\"Trimmed Text\",{},Text.Clean),\r\n    #\"Removed Empty Rows\" = Table.SelectRows(#\"Cleaned Text\", each not List.IsEmpty(List.RemoveMatchingItems(Record.FieldValues(_), {\"\", null}))),\r\n    #\"Changed Type\" = Table.TransformColumnTypes(#\"Removed Empty Rows\",{\r\n        {\"Date\", type date},\r\n        {\"Amount\", type number},\r\n        {\"Category\", type text}\r\n    }),\r\n    #\"Replaced Errors\" = Table.ReplaceErrorValues(#\"Changed Type\", {{\"Amount\", 0}, {\"Date\", #date(2024,1,1)}})\r\nin\r\n    #\"Replaced Errors\"`;\n        case \"transformation\":\n            return `let\r\n    Source = Excel.CurrentWorkbook(){[Name=\"DataTable\"]}[Content],\r\n    #\"Promoted Headers\" = Table.PromoteHeaders(Source, [PromoteAllScalars=true]),\r\n    #\"Unpivoted Columns\" = Table.UnpivotOtherColumns(#\"Promoted Headers\", {\"ID\", \"Name\"}, \"Month\", \"Value\"),\r\n    #\"Changed Type\" = Table.TransformColumnTypes(#\"Unpivoted Columns\",{\r\n        {\"ID\", Int64.Type},\r\n        {\"Value\", type number},\r\n        {\"Month\", type text}\r\n    }),\r\n    #\"Added Year\" = Table.AddColumn(#\"Changed Type\", \"Year\", each Date.Year(Date.From([Month]))),\r\n    #\"Grouped Rows\" = Table.Group(#\"Added Year\", {\"ID\", \"Name\", \"Year\"}, {\r\n        {\"Total\", each List.Sum([Value]), type number},\r\n        {\"Average\", each List.Average([Value]), type number}\r\n    })\r\nin\r\n    #\"Grouped Rows\"`;\n        case \"financial\":\n            return `let\r\n    Source = Excel.CurrentWorkbook(){[Name=\"FinancialData\"]}[Content],\r\n    #\"Promoted Headers\" = Table.PromoteHeaders(Source, [PromoteAllScalars=true]),\r\n    #\"Changed Type\" = Table.TransformColumnTypes(#\"Promoted Headers\",{\r\n        {\"Date\", type date},\r\n        {\"Revenue\", type number},\r\n        {\"Expenses\", type number}\r\n    }),\r\n    #\"Added Net Income\" = Table.AddColumn(#\"Changed Type\", \"Net Income\", each [Revenue] - [Expenses]),\r\n    #\"Added Margin %\" = Table.AddColumn(#\"Added Net Income\", \"Margin %\", each [Net Income] / [Revenue]),\r\n    #\"Added Growth %\" = Table.AddColumn(#\"Added Margin %\", \"Growth %\", each \r\n        if [Date] = List.Min(#\"Added Margin %\"[Date]) then null \r\n        else ([Revenue] - List.Last(List.Sort(Table.SelectRows(#\"Added Margin %\", each [Date] < _[Date])[Revenue]))) \r\n             / List.Last(List.Sort(Table.SelectRows(#\"Added Margin %\", each [Date] < _[Date])[Revenue]))\r\n    ),\r\n    #\"Added YTD Revenue\" = Table.AddColumn(#\"Added Growth %\", \"YTD Revenue\", each \r\n        List.Sum(Table.SelectRows(#\"Added Growth %\", each Date.Year([Date]) = Date.Year(_[Date]) and [Date] <= _[Date])[Revenue])\r\n    ),\r\n    #\"Formatted Numbers\" = Table.TransformColumnTypes(#\"Added YTD Revenue\",{\r\n        {\"Margin %\", Percentage.Type},\r\n        {\"Growth %\", Percentage.Type}\r\n    })\r\nin\r\n    #\"Formatted Numbers\"`;\n        default:\n            return `let\r\n    Source = Excel.CurrentWorkbook(){[Name=\"Table1\"]}[Content],\r\n    #\"Promoted Headers\" = Table.PromoteHeaders(Source, [PromoteAllScalars=true]),\r\n    #\"Changed Type\" = Table.TransformColumnTypes(#\"Promoted Headers\",{\r\n        {\"Column1\", type text},\r\n        {\"Column2\", type number},\r\n        {\"Column3\", type date}\r\n    })\r\nin\r\n    #\"Changed Type\"`;\n    }\n}\nfunction generatePreviewData(template) {\n    switch(template){\n        case \"data_cleaning\":\n            return [\n                [\n                    \"Date\",\n                    \"Product\",\n                    \"Category\",\n                    \"Amount\"\n                ],\n                [\n                    \"2024-01-15\",\n                    \"Laptop Pro\",\n                    \"Electronics\",\n                    1299.99\n                ],\n                [\n                    \"2024-01-16\",\n                    \"Wireless Mouse\",\n                    \"Electronics\",\n                    29.99\n                ],\n                [\n                    \"2024-01-17\",\n                    \"Office Chair\",\n                    \"Furniture\",\n                    249.99\n                ],\n                [\n                    \"2024-01-18\",\n                    \"Standing Desk\",\n                    \"Furniture\",\n                    599.99\n                ]\n            ];\n        case \"transformation\":\n            return [\n                [\n                    \"ID\",\n                    \"Name\",\n                    \"Year\",\n                    \"Total\",\n                    \"Average\"\n                ],\n                [\n                    1,\n                    \"Product A\",\n                    2024,\n                    15000,\n                    1250\n                ],\n                [\n                    2,\n                    \"Product B\",\n                    2024,\n                    23000,\n                    1917\n                ],\n                [\n                    3,\n                    \"Product C\",\n                    2024,\n                    18500,\n                    1542\n                ]\n            ];\n        case \"financial\":\n            return [\n                [\n                    \"Date\",\n                    \"Revenue\",\n                    \"Expenses\",\n                    \"Net Income\",\n                    \"Margin %\",\n                    \"Growth %\",\n                    \"YTD Revenue\"\n                ],\n                [\n                    \"2024-01-01\",\n                    125000,\n                    85000,\n                    40000,\n                    \"32.0%\",\n                    null,\n                    125000\n                ],\n                [\n                    \"2024-02-01\",\n                    132000,\n                    88000,\n                    44000,\n                    \"33.3%\",\n                    \"5.6%\",\n                    257000\n                ],\n                [\n                    \"2024-03-01\",\n                    145000,\n                    92000,\n                    53000,\n                    \"36.6%\",\n                    \"9.8%\",\n                    402000\n                ]\n            ];\n        default:\n            return [\n                [\n                    \"Column1\",\n                    \"Column2\",\n                    \"Column3\"\n                ],\n                [\n                    \"Sample\",\n                    100,\n                    \"2024-01-01\"\n                ],\n                [\n                    \"Data\",\n                    200,\n                    \"2024-01-02\"\n                ],\n                [\n                    \"Here\",\n                    300,\n                    \"2024-01-03\"\n                ]\n            ];\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(api)/./pages/api/excel/powerquery.ts\n");

/***/ })

};
;

// load runtime
var __webpack_require__ = require("../../../webpack-api-runtime.js");
__webpack_require__.C(exports);
var __webpack_exec__ = (moduleId) => (__webpack_require__(__webpack_require__.s = moduleId))
var __webpack_exports__ = __webpack_require__.X(0, ["vendor-chunks/next"], () => (__webpack_exec__("(api)/./node_modules/next/dist/build/webpack/loaders/next-route-loader/index.js?kind=PAGES_API&page=%2Fapi%2Fexcel%2Fpowerquery&preferredRegion=&absolutePagePath=.%2Fpages%5Capi%5Cexcel%5Cpowerquery.ts&middlewareConfigBase64=e30%3D!")));
module.exports = __webpack_exports__;

})();