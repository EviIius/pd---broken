"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(() => {
var exports = {};
exports.id = "pages/api/excel/analyze";
exports.ids = ["pages/api/excel/analyze"];
exports.modules = {

/***/ "next/dist/compiled/next-server/pages-api.runtime.dev.js":
/*!**************************************************************************!*\
  !*** external "next/dist/compiled/next-server/pages-api.runtime.dev.js" ***!
  \**************************************************************************/
/***/ ((module) => {

module.exports = require("next/dist/compiled/next-server/pages-api.runtime.dev.js");

/***/ }),

/***/ "xlsx":
/*!***********************!*\
  !*** external "xlsx" ***!
  \***********************/
/***/ ((module) => {

module.exports = require("xlsx");

/***/ }),

/***/ "(api)/./node_modules/next/dist/build/webpack/loaders/next-route-loader/index.js?kind=PAGES_API&page=%2Fapi%2Fexcel%2Fanalyze&preferredRegion=&absolutePagePath=.%2Fpages%5Capi%5Cexcel%5Canalyze.ts&middlewareConfigBase64=e30%3D!":
/*!************************************************************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/next/dist/build/webpack/loaders/next-route-loader/index.js?kind=PAGES_API&page=%2Fapi%2Fexcel%2Fanalyze&preferredRegion=&absolutePagePath=.%2Fpages%5Capi%5Cexcel%5Canalyze.ts&middlewareConfigBase64=e30%3D! ***!
  \************************************************************************************************************************************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   config: () => (/* binding */ config),\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__),\n/* harmony export */   routeModule: () => (/* binding */ routeModule)\n/* harmony export */ });\n/* harmony import */ var next_dist_server_future_route_modules_pages_api_module_compiled__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! next/dist/server/future/route-modules/pages-api/module.compiled */ \"(api)/./node_modules/next/dist/server/future/route-modules/pages-api/module.compiled.js\");\n/* harmony import */ var next_dist_server_future_route_modules_pages_api_module_compiled__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_future_route_modules_pages_api_module_compiled__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var next_dist_server_future_route_kind__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! next/dist/server/future/route-kind */ \"(api)/./node_modules/next/dist/server/future/route-kind.js\");\n/* harmony import */ var next_dist_build_templates_helpers__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! next/dist/build/templates/helpers */ \"(api)/./node_modules/next/dist/build/templates/helpers.js\");\n/* harmony import */ var _pages_api_excel_analyze_ts__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./pages\\api\\excel\\analyze.ts */ \"(api)/./pages/api/excel/analyze.ts\");\n\n\n\n// Import the userland code.\n\n// Re-export the handler (should be the default export).\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ((0,next_dist_build_templates_helpers__WEBPACK_IMPORTED_MODULE_2__.hoist)(_pages_api_excel_analyze_ts__WEBPACK_IMPORTED_MODULE_3__, \"default\"));\n// Re-export config.\nconst config = (0,next_dist_build_templates_helpers__WEBPACK_IMPORTED_MODULE_2__.hoist)(_pages_api_excel_analyze_ts__WEBPACK_IMPORTED_MODULE_3__, \"config\");\n// Create and export the route module that will be consumed.\nconst routeModule = new next_dist_server_future_route_modules_pages_api_module_compiled__WEBPACK_IMPORTED_MODULE_0__.PagesAPIRouteModule({\n    definition: {\n        kind: next_dist_server_future_route_kind__WEBPACK_IMPORTED_MODULE_1__.RouteKind.PAGES_API,\n        page: \"/api/excel/analyze\",\n        pathname: \"/api/excel/analyze\",\n        // The following aren't used in production.\n        bundlePath: \"\",\n        filename: \"\"\n    },\n    userland: _pages_api_excel_analyze_ts__WEBPACK_IMPORTED_MODULE_3__\n});\n\n//# sourceMappingURL=pages-api.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwaSkvLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L2J1aWxkL3dlYnBhY2svbG9hZGVycy9uZXh0LXJvdXRlLWxvYWRlci9pbmRleC5qcz9raW5kPVBBR0VTX0FQSSZwYWdlPSUyRmFwaSUyRmV4Y2VsJTJGYW5hbHl6ZSZwcmVmZXJyZWRSZWdpb249JmFic29sdXRlUGFnZVBhdGg9LiUyRnBhZ2VzJTVDYXBpJTVDZXhjZWwlNUNhbmFseXplLnRzJm1pZGRsZXdhcmVDb25maWdCYXNlNjQ9ZTMwJTNEISIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7OztBQUFzRztBQUN2QztBQUNMO0FBQzFEO0FBQzREO0FBQzVEO0FBQ0EsaUVBQWUsd0VBQUssQ0FBQyx3REFBUSxZQUFZLEVBQUM7QUFDMUM7QUFDTyxlQUFlLHdFQUFLLENBQUMsd0RBQVE7QUFDcEM7QUFDTyx3QkFBd0IsZ0hBQW1CO0FBQ2xEO0FBQ0EsY0FBYyx5RUFBUztBQUN2QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMLFlBQVk7QUFDWixDQUFDOztBQUVEIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZnJvbnRlbmQvPzZmYjIiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgUGFnZXNBUElSb3V0ZU1vZHVsZSB9IGZyb20gXCJuZXh0L2Rpc3Qvc2VydmVyL2Z1dHVyZS9yb3V0ZS1tb2R1bGVzL3BhZ2VzLWFwaS9tb2R1bGUuY29tcGlsZWRcIjtcbmltcG9ydCB7IFJvdXRlS2luZCB9IGZyb20gXCJuZXh0L2Rpc3Qvc2VydmVyL2Z1dHVyZS9yb3V0ZS1raW5kXCI7XG5pbXBvcnQgeyBob2lzdCB9IGZyb20gXCJuZXh0L2Rpc3QvYnVpbGQvdGVtcGxhdGVzL2hlbHBlcnNcIjtcbi8vIEltcG9ydCB0aGUgdXNlcmxhbmQgY29kZS5cbmltcG9ydCAqIGFzIHVzZXJsYW5kIGZyb20gXCIuL3BhZ2VzXFxcXGFwaVxcXFxleGNlbFxcXFxhbmFseXplLnRzXCI7XG4vLyBSZS1leHBvcnQgdGhlIGhhbmRsZXIgKHNob3VsZCBiZSB0aGUgZGVmYXVsdCBleHBvcnQpLlxuZXhwb3J0IGRlZmF1bHQgaG9pc3QodXNlcmxhbmQsIFwiZGVmYXVsdFwiKTtcbi8vIFJlLWV4cG9ydCBjb25maWcuXG5leHBvcnQgY29uc3QgY29uZmlnID0gaG9pc3QodXNlcmxhbmQsIFwiY29uZmlnXCIpO1xuLy8gQ3JlYXRlIGFuZCBleHBvcnQgdGhlIHJvdXRlIG1vZHVsZSB0aGF0IHdpbGwgYmUgY29uc3VtZWQuXG5leHBvcnQgY29uc3Qgcm91dGVNb2R1bGUgPSBuZXcgUGFnZXNBUElSb3V0ZU1vZHVsZSh7XG4gICAgZGVmaW5pdGlvbjoge1xuICAgICAgICBraW5kOiBSb3V0ZUtpbmQuUEFHRVNfQVBJLFxuICAgICAgICBwYWdlOiBcIi9hcGkvZXhjZWwvYW5hbHl6ZVwiLFxuICAgICAgICBwYXRobmFtZTogXCIvYXBpL2V4Y2VsL2FuYWx5emVcIixcbiAgICAgICAgLy8gVGhlIGZvbGxvd2luZyBhcmVuJ3QgdXNlZCBpbiBwcm9kdWN0aW9uLlxuICAgICAgICBidW5kbGVQYXRoOiBcIlwiLFxuICAgICAgICBmaWxlbmFtZTogXCJcIlxuICAgIH0sXG4gICAgdXNlcmxhbmRcbn0pO1xuXG4vLyMgc291cmNlTWFwcGluZ1VSTD1wYWdlcy1hcGkuanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(api)/./node_modules/next/dist/build/webpack/loaders/next-route-loader/index.js?kind=PAGES_API&page=%2Fapi%2Fexcel%2Fanalyze&preferredRegion=&absolutePagePath=.%2Fpages%5Capi%5Cexcel%5Canalyze.ts&middlewareConfigBase64=e30%3D!\n");

/***/ }),

/***/ "(api)/./pages/api/excel/analyze.ts":
/*!************************************!*\
  !*** ./pages/api/excel/analyze.ts ***!
  \************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ handler)\n/* harmony export */ });\n/* harmony import */ var xlsx__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! xlsx */ \"xlsx\");\n/* harmony import */ var xlsx__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(xlsx__WEBPACK_IMPORTED_MODULE_0__);\n\n// Enhanced analysis with more realistic data generation\nasync function handler(req, res) {\n    if (req.method !== \"POST\") {\n        return res.status(405).json({\n            error: \"Method not allowed\"\n        });\n    }\n    try {\n        const { workbookId, workbook } = req.body;\n        if (!workbookId) {\n            return res.status(400).json({\n                error: \"Workbook ID is required\"\n            });\n        }\n        // Simulate analysis processing time\n        await new Promise((resolve)=>setTimeout(resolve, 1500));\n        // Generate dynamic analysis based on workbook if provided\n        const analysis = generateDynamicAnalysis(workbook);\n        res.status(200).json(analysis);\n    } catch (error) {\n        console.error(\"Error analyzing workbook:\", error);\n        res.status(500).json({\n            error: \"Failed to analyze workbook\"\n        });\n    }\n}\nfunction generateDynamicAnalysis(workbook) {\n    console.log(\"Generating dynamic analysis for workbook:\", workbook?.name);\n    // Default values for when no workbook is provided\n    let totalSheets = 3;\n    let totalRows = 1250;\n    let totalColumns = 12;\n    let totalFormulas = 45;\n    let complexityScore = 72;\n    let automationPotential = \"high\";\n    let dataTypesDistribution = {\n        \"text\": 6,\n        \"number\": 4,\n        \"date\": 2\n    };\n    // If workbook data is provided, analyze it for real insights\n    if (workbook && workbook.sheets && Array.isArray(workbook.sheets)) {\n        console.log(\"Analyzing real workbook data...\");\n        totalSheets = workbook.sheets.length;\n        totalRows = workbook.sheets.reduce((sum, sheet)=>sum + (sheet.rowCount || 0), 0);\n        totalColumns = Math.max(...workbook.sheets.map((sheet)=>sheet.columnCount || 0), 1);\n        totalFormulas = workbook.sheets.reduce((sum, sheet)=>sum + (sheet.formulaCells?.length || 0), 0);\n        // Analyze data types across all sheets\n        const allDataTypes = {\n            text: 0,\n            number: 0,\n            date: 0\n        };\n        workbook.sheets.forEach((sheet)=>{\n            if (sheet.dataTypes && Array.isArray(sheet.dataTypes)) {\n                sheet.dataTypes.forEach((col)=>{\n                    if (col.dataType === \"text\") {\n                        allDataTypes.text += 1;\n                    } else if (col.dataType === \"number\") {\n                        allDataTypes.number += 1;\n                    } else if (col.dataType === \"date\") {\n                        allDataTypes.date += 1;\n                    }\n                });\n            }\n        });\n        dataTypesDistribution = allDataTypes;\n        // Calculate complexity score based on actual data\n        const formulaDensity = totalRows > 0 ? totalFormulas / totalRows * 100 : 0;\n        const sheetComplexity = totalSheets * 10;\n        const dataVolumeComplexity = Math.min(30, Math.log10(totalRows + 1) * 10);\n        complexityScore = Math.min(100, Math.round(formulaDensity + sheetComplexity + dataVolumeComplexity));\n        // Determine automation potential based on real metrics\n        const hasComplexFormulas = workbook.sheets.some((sheet)=>sheet.formulaCells?.some((formula)=>formula.formula?.includes(\"VLOOKUP\") || formula.formula?.includes(\"INDEX\") || formula.formula?.includes(\"MATCH\") || formula.formula?.includes(\"SUMIFS\") || formula.formula?.includes(\"COUNTIFS\")));\n        const hasMultipleSheets = totalSheets > 1;\n        const hasLargeDataset = totalRows > 100;\n        if (hasComplexFormulas && hasMultipleSheets || totalFormulas > 20) {\n            automationPotential = \"high\";\n        } else if (hasComplexFormulas || hasMultipleSheets || totalFormulas > 5) {\n            automationPotential = \"medium\";\n        } else {\n            automationPotential = \"low\";\n        }\n        console.log(\"Analysis metrics:\", {\n            totalSheets,\n            totalRows,\n            totalColumns,\n            totalFormulas,\n            complexityScore,\n            automationPotential,\n            dataTypesDistribution\n        });\n    }\n    return {\n        summary: {\n            totalSheets,\n            totalRows,\n            totalColumns,\n            totalFormulas,\n            dataTypes: dataTypesDistribution,\n            complexityScore,\n            automationPotential\n        },\n        recommendations: generateRecommendations(totalFormulas, totalSheets, automationPotential, workbook),\n        suggestedFormulas: generateSuggestedFormulas(workbook),\n        suggestedPowerQueries: generatePowerQueryTemplates(workbook),\n        dataQualityIssues: generateDataQualityIssues(workbook)\n    };\n}\nfunction generateRecommendations(formulas, sheets, automation, workbook) {\n    const recommendations = [];\n    // Analyze actual workbook data if available\n    const hasComplexFormulas = workbook?.sheets?.some((sheet)=>sheet.formulaCells?.some((formula)=>formula.formula?.includes(\"VLOOKUP\") || formula.formula?.includes(\"INDEX\") || formula.formula?.includes(\"SUMIFS\")));\n    const hasMultipleDataSources = sheets > 1;\n    const hasLargeDataset = workbook?.sheets?.some((sheet)=>sheet.rowCount > 100);\n    if (formulas > 10 || hasComplexFormulas) {\n        recommendations.push({\n            id: \"rec_1\",\n            type: \"powerquery\",\n            priority: \"high\",\n            title: \"Automate Data Processing with PowerQuery\",\n            description: `${hasComplexFormulas ? \"Complex lookup formulas\" : `${formulas} formulas`} detected. PowerQuery can automate these transformations`,\n            implementation: \"Use Data → Get Data → From Other Sources → Blank Query to create automated data pipelines\",\n            impact: `Reduce manual formula maintenance by ${hasComplexFormulas ? \"80%\" : \"70%\"}`,\n            effort: hasComplexFormulas ? \"high\" : \"medium\"\n        });\n    }\n    if (hasMultipleDataSources) {\n        recommendations.push({\n            id: \"rec_2\",\n            type: \"formula\",\n            priority: \"medium\",\n            title: \"Consolidate Sheet References\",\n            description: `Multiple sheets detected (${sheets}). Use dynamic references to improve maintainability`,\n            implementation: \"Replace hard-coded sheet references with INDIRECT or structured references\",\n            impact: \"Improve workbook flexibility and reduce errors\",\n            effort: \"low\"\n        });\n    }\n    recommendations.push({\n        id: \"rec_3\",\n        type: \"data_validation\",\n        priority: automation === \"high\" ? \"high\" : \"medium\",\n        title: \"Implement Data Validation\",\n        description: \"Add validation rules to prevent data entry errors and improve data quality\",\n        implementation: \"Use Data → Data Validation for critical input fields\",\n        impact: \"Reduce data quality issues by 90%\",\n        effort: \"low\"\n    });\n    return recommendations;\n}\nfunction generateSuggestedFormulas(workbook) {\n    const formulas = [];\n    // Default formulas\n    const defaultFormulas = [\n        {\n            formula: '=XLOOKUP(A2,Products[Product_ID],Products[Price],\"\")',\n            description: \"Dynamic price lookup with error handling\",\n            cellAddress: \"D2\",\n            category: \"lookup\",\n            complexity: \"intermediate\",\n            dependencies: [\n                \"A2\",\n                \"Products[Product_ID]\",\n                \"Products[Price]\"\n            ],\n            explanation: \"This formula looks up prices dynamically and returns an empty string if not found.\"\n        },\n        {\n            formula: '=SUMIFS(Sales[Amount],Sales[Date],\">=\"&TODAY()-30)',\n            description: \"Sum sales from last 30 days\",\n            cellAddress: \"G2\",\n            category: \"math\",\n            complexity: \"intermediate\",\n            dependencies: [\n                \"Sales[Amount]\",\n                \"Sales[Date]\"\n            ],\n            explanation: \"Calculates total sales for the last 30 days using dynamic date criteria.\"\n        }\n    ];\n    // Add workbook-specific formulas if data is available\n    if (workbook && workbook.sheets) {\n        workbook.sheets.forEach((sheet, sheetIndex)=>{\n            if (sheet.headers && sheet.dataTypes) {\n                // Generate formulas based on detected data types\n                const numberColumns = sheet.dataTypes.filter((col)=>col.dataType === \"number\");\n                const dateColumns = sheet.dataTypes.filter((col)=>col.dataType === \"date\");\n                const textColumns = sheet.dataTypes.filter((col)=>col.dataType === \"text\");\n                // If we have number columns, suggest SUM formulas\n                if (numberColumns.length > 0) {\n                    const firstNumberCol = numberColumns[0];\n                    const colLetter = firstNumberCol.columnLetter || xlsx__WEBPACK_IMPORTED_MODULE_0__.utils.encode_col(firstNumberCol.columnIndex || 0);\n                    formulas.push({\n                        formula: `=SUM(${colLetter}2:${colLetter}1000)`,\n                        description: `Sum all values in ${firstNumberCol.header} column`,\n                        cellAddress: `${colLetter}${sheet.rowCount + 2}`,\n                        category: \"math\",\n                        complexity: \"basic\",\n                        dependencies: [\n                            `${colLetter}2:${colLetter}1000`\n                        ],\n                        explanation: `Calculates the total of all numeric values in the ${firstNumberCol.header} column.`\n                    });\n                    formulas.push({\n                        formula: `=AVERAGE(${colLetter}2:${colLetter}1000)`,\n                        description: `Average of ${firstNumberCol.header} column`,\n                        cellAddress: `${colLetter}${sheet.rowCount + 3}`,\n                        category: \"math\",\n                        complexity: \"basic\",\n                        dependencies: [\n                            `${colLetter}2:${colLetter}1000`\n                        ],\n                        explanation: `Calculates the average of all numeric values in the ${firstNumberCol.header} column.`\n                    });\n                }\n                // If we have date columns, suggest date-related formulas\n                if (dateColumns.length > 0) {\n                    const firstDateCol = dateColumns[0];\n                    const colLetter = firstDateCol.columnLetter || xlsx__WEBPACK_IMPORTED_MODULE_0__.utils.encode_col(firstDateCol.columnIndex || 0);\n                    const nextColLetter = xlsx__WEBPACK_IMPORTED_MODULE_0__.utils.encode_col((firstDateCol.columnIndex || 0) + 1);\n                    formulas.push({\n                        formula: `=COUNTIFS(${colLetter}:${colLetter},\">=\"&TODAY()-30)`,\n                        description: `Count recent entries in ${firstDateCol.header}`,\n                        cellAddress: `${nextColLetter}${sheet.rowCount + 2}`,\n                        category: \"date\",\n                        complexity: \"intermediate\",\n                        dependencies: [\n                            `${colLetter}:${colLetter}`\n                        ],\n                        explanation: `Counts how many entries in ${firstDateCol.header} are from the last 30 days.`\n                    });\n                }\n                // If we have multiple columns, suggest lookup formulas\n                if (sheet.headers.length > 2) {\n                    const firstCol = sheet.dataTypes[0];\n                    const secondCol = sheet.dataTypes[1];\n                    if (firstCol && secondCol) {\n                        const firstColLetter = firstCol.columnLetter || xlsx__WEBPACK_IMPORTED_MODULE_0__.utils.encode_col(firstCol.columnIndex || 0);\n                        const secondColLetter = secondCol.columnLetter || xlsx__WEBPACK_IMPORTED_MODULE_0__.utils.encode_col(secondCol.columnIndex || 1);\n                        const resultColLetter = xlsx__WEBPACK_IMPORTED_MODULE_0__.utils.encode_col((secondCol.columnIndex || 1) + 2);\n                        formulas.push({\n                            formula: `=XLOOKUP(A2,${firstColLetter}:${firstColLetter},${secondColLetter}:${secondColLetter},\"Not Found\")`,\n                            description: `Lookup ${secondCol.header} based on ${firstCol.header}`,\n                            cellAddress: `${resultColLetter}2`,\n                            category: \"lookup\",\n                            complexity: \"intermediate\",\n                            dependencies: [\n                                `A2`,\n                                `${firstColLetter}:${firstColLetter}`,\n                                `${secondColLetter}:${secondColLetter}`\n                            ],\n                            explanation: `Finds the corresponding ${secondCol.header} value for each ${firstCol.header} entry.`\n                        });\n                    }\n                }\n            }\n        });\n    }\n    // Add default formulas with workbook-specific ones\n    if (workbook && workbook.sheets) {\n        const hasDateColumns = workbook.sheets.some((sheet)=>sheet.dataTypes?.some((dt)=>dt.dataType === \"date\"));\n        if (hasDateColumns) {\n            formulas.push({\n                formula: \"=FILTER(Data[Product],(Data[Date]>=EOMONTH(TODAY(),-1)+1)*(Data[Date]<=EOMONTH(TODAY(),0)))\",\n                description: \"Filter current month data\",\n                cellAddress: \"A10\",\n                category: \"lookup\",\n                complexity: \"advanced\",\n                dependencies: [\n                    \"Data[Product]\",\n                    \"Data[Date]\"\n                ],\n                explanation: \"Returns all records from the current month using dynamic array formulas.\"\n            });\n        }\n    }\n    // Combine default and generated formulas, limiting to reasonable amount\n    return [\n        ...defaultFormulas,\n        ...formulas\n    ].slice(0, 8);\n}\nfunction generatePowerQueryTemplates(workbook) {\n    const templates = [\n        {\n            id: \"pq_1\",\n            name: \"Data Standardization\",\n            description: \"Clean and standardize data formats across all columns\",\n            category: \"data_cleaning\",\n            steps: [\n                {\n                    id: \"step_1\",\n                    name: \"Promote Headers\",\n                    operation: \"headers\",\n                    mCode: \"Table.PromoteHeaders(Source, [PromoteAllScalars=true])\",\n                    description: \"Promote first row to column headers\",\n                    isApplied: true\n                },\n                {\n                    id: \"step_2\",\n                    name: \"Trim Text\",\n                    operation: \"replace\",\n                    mCode: 'Table.TransformColumns(#\"Promoted Headers\", {}, Text.Trim)',\n                    description: \"Remove leading and trailing spaces\",\n                    isApplied: true\n                },\n                {\n                    id: \"step_3\",\n                    name: \"Detect Data Types\",\n                    operation: \"dataTypes\",\n                    mCode: 'Table.DetectDataTypes(#\"Trimmed Text\")',\n                    description: \"Automatically detect and apply proper data types\",\n                    isApplied: true\n                }\n            ],\n            requiredColumns: [],\n            outputColumns: [],\n            mCode: `let\r\n    Source = Excel.CurrentWorkbook(){[Name=\"Table1\"]}[Content],\r\n    #\"Promoted Headers\" = Table.PromoteHeaders(Source, [PromoteAllScalars=true]),\r\n    #\"Trimmed Text\" = Table.TransformColumns(#\"Promoted Headers\", {}, Text.Trim),\r\n    #\"Detected Types\" = Table.DetectDataTypes(#\"Trimmed Text\")\r\nin\r\n    #\"Detected Types\"`\n        }\n    ];\n    // Add workbook-specific templates\n    if (workbook && workbook.sheets) {\n        const hasNumericData = workbook.sheets.some((sheet)=>sheet.dataTypes?.some((dt)=>dt.dataType === \"number\"));\n        if (hasNumericData) {\n            templates.push({\n                id: \"pq_2\",\n                name: \"Numerical Analysis\",\n                description: \"Group and analyze numerical data with calculations\",\n                category: \"analysis\",\n                steps: [\n                    {\n                        id: \"step_1\",\n                        name: \"Group By Category\",\n                        operation: \"group\",\n                        mCode: 'Table.Group(Source, {\"Category\"}, {{\"Total\", each List.Sum([Amount]), type number}, {\"Count\", each Table.RowCount(_), type number}})',\n                        description: \"Group data and calculate totals\",\n                        isApplied: true\n                    },\n                    {\n                        id: \"step_2\",\n                        name: \"Add Percentage\",\n                        operation: \"add_column\",\n                        mCode: 'Table.AddColumn(#\"Grouped Rows\", \"Percentage\", each [Total] / List.Sum(#\"Grouped Rows\"[Total]) * 100)',\n                        description: \"Calculate percentage of total\",\n                        isApplied: true\n                    }\n                ],\n                requiredColumns: [\n                    \"Category\",\n                    \"Amount\"\n                ],\n                outputColumns: [\n                    \"Category\",\n                    \"Total\",\n                    \"Count\",\n                    \"Percentage\"\n                ],\n                mCode: `let\r\n    Source = Excel.CurrentWorkbook(){[Name=\"Data\"]}[Content],\r\n    #\"Grouped Rows\" = Table.Group(Source, {\"Category\"}, {{\"Total\", each List.Sum([Amount]), type number}, {\"Count\", each Table.RowCount(_), type number}}),\r\n    #\"Added Percentage\" = Table.AddColumn(#\"Grouped Rows\", \"Percentage\", each [Total] / List.Sum(#\"Grouped Rows\"[Total]) * 100)\r\nin\r\n    #\"Added Percentage\"`\n            });\n        }\n    }\n    return templates;\n}\nfunction generateDataQualityIssues(workbook) {\n    const issues = [];\n    if (workbook && workbook.sheets) {\n        workbook.sheets.forEach((sheet, sheetIndex)=>{\n            if (sheet.dataTypes) {\n                sheet.dataTypes.forEach((col)=>{\n                    const nullPercentage = col.nullCount / Math.max(sheet.rowCount - 1, 1) * 100;\n                    const colLetter = col.columnLetter || xlsx__WEBPACK_IMPORTED_MODULE_0__.utils.encode_col(col.columnIndex || 0);\n                    if (nullPercentage > 20) {\n                        issues.push({\n                            id: `dq_null_${sheetIndex}_${col.columnIndex}`,\n                            type: \"missing_data\",\n                            severity: nullPercentage > 50 ? \"high\" : \"medium\",\n                            sheet: sheet.name,\n                            column: col.header,\n                            description: `${nullPercentage.toFixed(1)}% missing values in ${col.header}`,\n                            affectedCells: [\n                                `${colLetter}2:${colLetter}${sheet.rowCount}`\n                            ],\n                            suggestedFix: \"Add data validation or implement default values for required fields\"\n                        });\n                    }\n                });\n                // Check for inconsistent data types\n                const textColumns = sheet.dataTypes.filter((col)=>col.dataType === \"text\");\n                textColumns.forEach((col)=>{\n                    const colLetter = col.columnLetter || xlsx__WEBPACK_IMPORTED_MODULE_0__.utils.encode_col(col.columnIndex || 0);\n                    if (col.uniqueCount === 1 && col.sampleValues.length > 0) {\n                        issues.push({\n                            id: `dq_uniform_${sheetIndex}_${col.columnIndex}`,\n                            type: \"inconsistent_format\",\n                            severity: \"low\",\n                            sheet: sheet.name,\n                            column: col.header,\n                            description: `${col.header} contains only one unique value: \"${col.sampleValues[0]}\"`,\n                            affectedCells: [\n                                `${colLetter}2:${colLetter}${sheet.rowCount}`\n                            ],\n                            suggestedFix: \"Verify if this column provides meaningful data variation\"\n                        });\n                    }\n                });\n            }\n            // Check for complex formulas that might be error-prone\n            if (sheet.formulaCells && sheet.formulaCells.length > 5) {\n                const complexFormulas = sheet.formulaCells.filter((formula)=>formula.formula && (formula.formula.includes(\"VLOOKUP\") || formula.formula.includes(\"INDEX\") && formula.formula.includes(\"MATCH\")));\n                if (complexFormulas.length > 3) {\n                    issues.push({\n                        id: `dq_complex_${sheetIndex}`,\n                        type: \"invalid_data\",\n                        severity: \"medium\",\n                        sheet: sheet.name,\n                        column: \"Various\",\n                        description: `${complexFormulas.length} complex lookup formulas detected`,\n                        affectedCells: complexFormulas.map((f)=>f.address),\n                        suggestedFix: \"Consider replacing with XLOOKUP or PowerQuery for better maintainability\"\n                    });\n                }\n            }\n        });\n    }\n    // Add some default issues if no real issues found (for demo purposes)\n    if (issues.length === 0) {\n        issues.push({\n            id: \"dq_demo_1\",\n            type: \"missing_data\",\n            severity: \"medium\",\n            sheet: \"Data\",\n            column: \"Important Field\",\n            description: \"Some required fields contain empty values\",\n            affectedCells: [\n                \"B15\",\n                \"B23\",\n                \"B41\"\n            ],\n            suggestedFix: \"Use data validation to require field entry or implement default values\"\n        });\n        issues.push({\n            id: \"dq_demo_2\",\n            type: \"inconsistent_format\",\n            severity: \"low\",\n            sheet: \"Data\",\n            column: \"Date Field\",\n            description: \"Inconsistent date formatting detected\",\n            affectedCells: [\n                \"A5\",\n                \"A12\",\n                \"A18\"\n            ],\n            suggestedFix: \"Standardize date format using Format Cells dialog\"\n        });\n    }\n    return issues.slice(0, 8); // Limit to reasonable number\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(api)/./pages/api/excel/analyze.ts\n");

/***/ })

};
;

// load runtime
var __webpack_require__ = require("../../../webpack-api-runtime.js");
__webpack_require__.C(exports);
var __webpack_exec__ = (moduleId) => (__webpack_require__(__webpack_require__.s = moduleId))
var __webpack_exports__ = __webpack_require__.X(0, ["vendor-chunks/next"], () => (__webpack_exec__("(api)/./node_modules/next/dist/build/webpack/loaders/next-route-loader/index.js?kind=PAGES_API&page=%2Fapi%2Fexcel%2Fanalyze&preferredRegion=&absolutePagePath=.%2Fpages%5Capi%5Cexcel%5Canalyze.ts&middlewareConfigBase64=e30%3D!")));
module.exports = __webpack_exports__;

})();